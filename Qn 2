Question 2: Do django signals run in the same thread as the caller? Please support your answer with a code snippet that conclusively proves your stance. The code does not need to be elegant and production ready, we just need to understand your logic.
Ans:
Yes, by default, Django signals run in the same thread as the caller. This means that the signal handler executes in the same thread as the code that triggered the signal.
Code:
# models.py
from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
import threading

# Sample Model
class MyModel(models.Model):
    name = models.CharField(max_length=100)

# Signal handler
@receiver(post_save, sender=MyModel)
def my_signal_handler(sender, instance, created, **kwargs):
    print(f"Signal handler running in thread: {threading.current_thread().name}")

# In a Django shell or view
instance = MyModel.objects.create(name="Test")

Output:
Signal handler running in thread: MainThread

This confirms that the signal is handled in the same thread as the code that created the MyModel instance.
